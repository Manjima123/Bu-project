package com.traininfoservice.resource;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.traininfoservice.model.Train;
import com.traininfoservice.repository.TrainsRepository;
@RestController
@RequestMapping("/traindetails")
public class TrainController {
	
	
	@Autowired
	private TrainsRepository trepo;
	@PostMapping("/{insert}")
	public Train insertTrain(@RequestBody Train train){
		
		Optional<Train> op = trepo.findById(train.getTrain_no());
		if(op.isPresent()) {
			return  train;
		}
		else {
			System.out.println("Data saved !!");
			Train t = trepo.save(train);
		
			System.out.println(t);
			return t;
		}
		
	}
	@GetMapping("/getalltraindetails/{train_no}")
	public Train getAllTrainDetailById(@PathVariable("train_no") String train_no){
		Optional<Train> op=trepo.findById(train_no);
		Train t=op.get();
		if(op.isPresent()) {
			
			return t;
		}
		else {
			return null;
		}
	}
	@GetMapping("/getalltraindetails")
	public List<Train> getAllTrainDetails(){
		List<Train> list = new ArrayList();
		trepo.findAll().forEach(list::add);
		return list;	
	}
	@PutMapping("/updatetraindetails/{train_no}")
	public ResponseEntity<Object> UpdateOrderById1(@PathVariable("train_no") String train_no, @RequestBody Train train) {
		Optional<Train> op = trepo.findById(train_no);
		if (op.isPresent()) {
			Train t = op.get();
			t.setPrice(train.getPrice());
			

			trepo.save(t);
			return new ResponseEntity<Object>(t, HttpStatus.OK);
		} else {
			return new ResponseEntity<Object>("Not updated successfully", HttpStatus.NOT_FOUND);
		}
	}
	@DeleteMapping("/deletetraindetails/{train_no}")
	public ResponseEntity<String> deleteTrainDetailsById(@PathVariable("train_no") String train_no){
		trepo.deleteById(train_no);
		return new ResponseEntity<String>("Deleted successfully", HttpStatus.OK);
	}
}